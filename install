#!/usr/bin/env bash
#
# Copyright (c) 2015 Joyent Inc., All rights reserved.
#
# Install Ubuntu 14.04 into a directory, modify the installation, then tar it up.
#

set -euo pipefail
IFS=$'\n\t'

GUESTTOOLS=guesttools
BUILD_DATE=$(date +%Y%m%d)
EXCLUDES=$PWD/exclude.txt

usage() {
cat <<EOF

Install and modify Ubuntu in a given directory using a given mirror.

Usage:
  $0 -r <RELEASE> -a <ARCH> -d <INSTALL_DIR> -m <MIRROR> -i <IMAGE_NAME> -p <NAME> -D <DESC> -u <DOCS> -c <CUSTOMIZE FILE>

Example:
  $0 -r trusty -a amd64 -d /mnt/chroot -m http://archive.ubuntu.com/ubuntu/ -i lx-ubuntu-14.04 -p "Ubuntu 14.04 LX Brand" -D "Ubuntu 14.04 64-bit lx-brand image." -u https://docs.joyent.com/images/lx-brand-beta

OPTIONS:
  -r The desired release (e.g "trusty")
  -a The desired architecture. Defaults to amd64 (64-bit). Use "i386" for 32-bit. [optional]
  -d A path to the install directory
  -m A URL for the desired archive mirror
  -i The name of the image. This is used for naming the tarball.
  -p The proper name of the image. Use quotes. This is used in the MOTD and /etc/product file.
  -D A description for the image. This is used in the image manifest and the /etc/product file.
  -u A URL to the image docs [optional]
  -c Customize file for image you want to create.  customize.postgresql, customize.percona
  -h Show this message

EOF
}

RELEASE=
ARCH=
INSTALL_DIR=
MIRROR=
IMAGE_NAME=
NAME=
DESC=
DOCS=
CUSTOMIZE=

while getopts "hr:a:d:m:i:p:D:u:c:" OPTION
do
  case $OPTION in
    h)
      usage
      exit
      ;;
    r)
      RELEASE=${OPTARG}
      ;;
    a)
      ARCH=${OPTARG}
      ;;
    d)
      INSTALL_DIR=${OPTARG%/}
      ;;
    m)
      MIRROR=${OPTARG}
      ;;
    i)
      IMAGE_NAME=${OPTARG}
      ;;
    p)
      NAME=${OPTARG}
      ;;
    D)
      DESC=${OPTARG}
      ;;
    u)
      DOCS=${OPTARG}
      ;;
    c)
      CUSTOMIZE=${OPTARG}
      ;;
    \?)
      usage
      exit
      ;;
  esac
done

if [[ $# -eq 0 ]]; then
  usage
  exit 1
fi

if [[ -z ${RELEASE} ]]; then
  echo "Error: missing release (-r) value"
  exit 1
fi

if [[ -z ${ARCH} ]]; then
  ARCH=amd64
fi

if [[ ! -e ${INSTALL_DIR} ]] ; then
  echo "Directory $INSTALL_DIR not found"
  exit 1
fi

if [[ -z ${INSTALL_DIR} ]]; then
  echo "Error: missing install directory (-d) value"
  exit 1
fi

if [[ -z ${MIRROR} ]]; then
  echo "Error: missing mirror (-m) value"
  exit 1
fi

if [[ -z ${IMAGE_NAME} ]]; then
  echo "Error: missing image name (-i) value"
  exit 1
fi

if [[ -z ${NAME} ]]; then
  echo "Error: missing proper name (-p) value"
  exit 1
fi

if [[ -z ${DESC} ]]; then
  echo "Error: missing image description (-D) value"
  exit 1
fi

TARGET="${IMAGE_NAME}-${BUILD_DATE}.tar.gz"

if [[ -z ${DOCS} ]]; then
  DOCS="https://docs.joyent.com/images/lx-brand-beta"
fi

umount_chroot() {
    if grep -qs "$INSTALL_DIR/sys" $INSTALL_DIR/proc/mounts; then
        echo "====> Unmounting /sys in chroot"
        umount -lf $INSTALL_DIR/sys
    fi
    
    if grep -qs "$INSTALL_DIR/proc" $INSTALL_DIR/proc/mounts; then
        echo "====> Unmounting /proc in chroot"
        umount -lf $INSTALL_DIR/proc
    fi
}

echo "==> Installing $NAME into $INSTALL_DIR"

if [[ -d $INSTALL_DIR ]]; then
  echo "====> Found previous install directory. Deleting and creating a new one."

  # umount previous /proc and /sys if they exist
  umount_chroot
  
  rm -rf $INSTALL_DIR
  mkdir -p $INSTALL_DIR
fi

debootstrap --components=main --arch=$ARCH \
    --include=ca-certificates,curl,gettext-base,less,man-db,openssh-server,sudo,wget,vim \
    $RELEASE $INSTALL_DIR $MIRROR
echo "==> Done!"

echo "==> Mounting /proc and /sys in chroot"
chroot $INSTALL_DIR mount -t proc none /proc
chroot $INSTALL_DIR mount -t sysfs sysfs /sys

echo "==> Setting TZ to UTC"
rm $INSTALL_DIR/etc/localtime
cp $INSTALL_DIR/usr/share/zoneinfo/UTC $INSTALL_DIR/etc/localtime

echo "==> Setting locale to en_US.UTF-8"
export DEBIAN_FRONTEND=noninteractive
chroot $INSTALL_DIR locale-gen en_US.UTF-8
chroot $INSTALL_DIR dpkg-reconfigure locales
echo "LANG=\"en_US.UTF-8\"" > $INSTALL_DIR/etc/default/locale

echo "==> Updating $INSTALL_DIR/etc/apt/sources.list"
cat << SOURCES > $INSTALL_DIR/etc/apt/sources.list
deb http://archive.ubuntu.com/ubuntu $RELEASE main
deb-src http://archive.ubuntu.com/ubuntu $RELEASE main
deb http://archive.ubuntu.com/ubuntu $RELEASE-updates main
deb-src http://archive.ubuntu.com/ubuntu $RELEASE-updates main
deb http://security.ubuntu.com/ubuntu $RELEASE-security main
deb-src http://security.ubuntu.com/ubuntu $RELEASE-security main

deb http://archive.ubuntu.com/ubuntu $RELEASE universe
deb-src http://archive.ubuntu.com/ubuntu $RELEASE universe
deb http://archive.ubuntu.com/ubuntu $RELEASE-updates universe
deb-src http://archive.ubuntu.com/ubuntu $RELEASE-updates universe
deb http://security.ubuntu.com/ubuntu $RELEASE-security universe
deb-src http://security.ubuntu.com/ubuntu $RELEASE-security universe
SOURCES

echo "==> Updating packages"

# Disable services in chroot  via divert before upgrading packages
# See https://bugs.launchpad.net/ubuntu/+source/upstart/+bug/430224
chroot $INSTALL_DIR dpkg-divert --local --rename --add /sbin/initctl
chroot $INSTALL_DIR ln -s /bin/true /sbin/initctl

chroot $INSTALL_DIR apt-get -y update
chroot $INSTALL_DIR apt-get -y upgrade

echo "==> Installing additional packages"
chroot $INSTALL_DIR apt-get -y install --no-install-recommends python-software-properties software-properties-common

echo "==> Cleaning up caches etc."
chroot $INSTALL_DIR apt-get -y autoremove
chroot $INSTALL_DIR apt-get -y clean

# Remove the divert that disables services
chroot $INSTALL_DIR rm -f /sbin/initctl
chroot $INSTALL_DIR dpkg-divert --local --rename --remove /sbin/initctl


echo "==> Disabling PasswordAuthentication"
sed s/PasswordAuthentication\ yes/PasswordAuthentication\ no/ -i $INSTALL_DIR/etc/ssh/sshd_config

echo "==> Removing resolvconf entries in $INSTALL_DIR/etc/resolvconf/resolv.conf.d/"
rm -rf $INSTALL_DIR/etc/resolvconf/resolv.conf.d/tail
rm -rf $INSTALL_DIR/etc/resolvconf/resolv.conf.d/original

echo "==> Adding getty service on ttyS0 for 'vmadm console' command"
cat << TTYS0 > $INSTALL_DIR/etc/init/ttyS0.conf
# ttyS0 - getty
#
# This service maintains a getty on ttyS0 from the point the system is
# started until it is shut down again.
# On SmartOS and Smart Data Center this allows you to attach a console
# via the 'vmadm console UUID' command

start on stopped rc RUNLEVEL=[2345] and (
            not-container or
            container CONTAINER=lxc or
            container CONTAINER=lxc-libvirt)

stop on runlevel [!2345]

respawn
exec /sbin/getty -L 115200 ttyS0 vt102 

TTYS0


echo "==> Creating /etc/motd"
cat << MOTD > $INSTALL_DIR/etc/motd
   __        .                   .
 _|  |_      | .-. .  . .-. :--. |-
|_    _|     ;|   ||  |(.-' |  | |
  |__|   \`--'  \`-' \`;-| \`-' '  ' \`-'
                   /  ;  Instance ($NAME $BUILD_DATE)
                   \`-'   $DOCS

MOTD

echo "==> Creating /etc/product file"
cat << PRODUCT > $INSTALL_DIR/etc/product
Name: Joyent Instance
Image: $NAME $BUILD_DATE
Documentation: $DOCS
Description: $DESC
PRODUCT

umount_chroot

if [[ ! -d $INSTALL_DIR/var/svc ]]; then
  echo "==> Creating $INSTALL_DIR/var/svc"
  mkdir -p $INSTALL_DIR/var/svc
fi

if [[ ! -d $INSTALL_DIR/var/db ]]; then
  echo "==> Creating $INSTALL_DIR/var/db"
  mkdir -p $INSTALL_DIR/var/db
fi


echo "==> Installing Guest tools in $INSTALL_DIR"
echo "====> Initiallizing and fetching submodule $GUESTTOOLS"
git submodule init
git submodule update
echo "====> Running ./install.sh -i $INSTALL_DIR"
cd $GUESTTOOLS
./install.sh -i $INSTALL_DIR
cd ..

echo "==> Installing dtracetools-lx in $INSTALL_DIR"
echo "====> Downloading package and SHASUMs from https://us-east.manta.joyent.com/joyentsoln/public/"

DTRACE_PACKAGE="dtracetools-lx_1.0_amd64.deb"
D_PKG_SHASUM="shasum256.txt"

curl -SLO https://us-east.manta.joyent.com/joyentsoln/public/images/lx-brand/devel/packages/${DTRACE_PACKAGE}
curl -SLO https://us-east.manta.joyent.com/joyentsoln/public/images/lx-brand/devel/packages/${D_PKG_SHASUM}

echo "====> Verifying package"
grep " ${DTRACE_PACKAGE}\$" ${D_PKG_SHASUM} | sha256sum -c - 

echo "====> Installing into $INSTALL_DIR"
dpkg --root $INSTALL_DIR -i ${DTRACE_PACKAGE}

if [[ ! -z ${CUSTOMIZE} ]]; then
  echo "==> Executing ${CUSTOMIZE} file.."
  chmod +x ${CUSTOMIZE}
  INSTALL_DIR="${INSTALL_DIR}" ./${CUSTOMIZE}
fi

echo "==> Saving installation as $TARGET. This may take a few minutes."
tar --numeric-owner --create --auto-compress --exclude-from=$EXCLUDES --file "$TARGET" --directory "$INSTALL_DIR" --transform='s,^./,,' .

echo "==> Installation complete!"
echo "==> $TARGET"

exit 0
